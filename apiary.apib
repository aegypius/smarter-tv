FORMAT: 1A

# Smarter TV API

Smarter TV API is a *media-center* service to store media meta-data heavily inspired by [Trakt.tv v2 API](http://docs.trakt.apiary.io/).

## Verbs

The API uses restful verbs

  Verb     | Description
  -------- | ----------------------------------------------------------
  `GET`    | Select one or more items. Success returns `200` status code.
  `POST`   | Create a new item. Success returns `201` status code.
  `PATCH`  | Update an item. Success returns `200` status code.
  `DELETE` | Delete an item. Success returns `204` status code.
  
You can also use `PUT` verb to update an item but it's recommended to use `PATCH` instead.

## Status Codes

The API will respond with one of the following codes

  Code   | Description
  ------:| -------------------------------------------------------
  `200`  | Success
  `201`  | Success - *new resource created (with `POST`)*
  `204`  | Success - *no content to return (with `DELETE`)*
  `400`  | Bad Request - *request could'nt be parsed*
  `401`  | Unauthorized - *OAuth must be provided*
  `403`  | Forbidden - *invalid API key or unapproved app*
  `404`  | Not Found - *method exists, but no record found*
  `405`  | Method Not Found - *method doesn't exists*
  `409`  | Conflict - *resource allready created*
  `412`  | Precondition Failed - *use application/json content-type*
  `422`  | Unprocessable Entity - *validation errors*
  `429`  | Rate Limit Exceeded
  `500`  | Server Error
  `503`  | Server Unavailable - *server overloaded*


## Objects Schemas

All methods accepts and returns standardized objects validated by JSON Schemas

### Movie

### TV-Show schemas
#### TV-Show 
#### Season 
#### Episode 

### Music schemas
#### Album
#### Song

### Person


# Group Video Library

Library collections are store using common objects for movies, tv-shows

## Movies [/library/movies]
### List all Movies [GET]

+ Response 200 (application/json)

        [{
        }]


### Add a Movie [POST]

+ Request (application/json)

        { }

+ Response 201 (application/json)

        { }


## Movie [/library/movies/{id}]
A single Movie object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Movie (tmdb) to perform action with.


### Retrieve a Movie [GET]
+ Response 200 (application/json)

        { }

### Remove a Movie [DELETE]
+ Response 204




## TV Shows [/library/tv-shows]
### List all shows [GET]

+ Response 200 (application/json)

        [{
        }]
